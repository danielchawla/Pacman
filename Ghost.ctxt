#BlueJ class context
comment0.params=track\ Speed
comment0.target=Ghost(boolean,\ int)
comment0.text=\n\ Act\ -\ do\ whatever\ the\ Ghost\ wants\ to\ do.\ This\ method\ is\ called\ whenever\n\ the\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\n
comment1.params=
comment1.target=void\ act()
comment10.params=
comment10.target=int\ quadrantToHome()
comment10.text=\n\ Used\ to\ detect\ where\ the\ respawn\ zone\ in\ relation\n\ to\ where\ the\ ghost\ is\ currently.\ Same\ principle\ as\n\ the\ quadrantToPacman()\ method\n
comment11.params=
comment11.target=void\ goHome()
comment11.text=\n\ Method\ to\ make\ the\ ghost\ return\ to\ their\ "home".\ This\ method\ uses\n\ the\ same\ principle\ as\ the\ Chase\ method.\n
comment12.params=
comment12.target=boolean\ atHome()
comment12.text=\n\ Checks\ to\ see\ if\ ghost\ are\ back\ at\ the\ respawn\ point\ by\ getting\ \n\ the\ x\ and\ y\ coordinates\ of\ the\ class\ RespawnZone\n
comment13.params=
comment13.target=void\ notHome()
comment13.text=\n\ Insures\ that\ when\ this\ method\ is\ called\ the\ ghost\ can't\n\ go\ back\ to\ the\ respawn\ zone.\ This\ creates\ a\ little\ secret\n\ haven\ for\ Pacman\n
comment14.params=
comment14.target=boolean\ enRoute()
comment14.text=\n\ This\ method\ checks\ if\ the\ ghosts\ are\ at\ certain\ intersections\n\ and\ it\ changes\ the\ rotation\ of\ the\ ghost\ so\ that\ they\ automatically\n\ follow\ a\ pathway\ that\ leads\ them\ to\ the\ respawn\ zone.\ Once\ the\ ghost\n\ are\ dead\ and\ they\ hit\ any\ of\ these\ coordinates,\ they\ are\ directed\ to\ \n\ the\ respawn\ zone.\n
comment15.params=
comment15.target=void\ ghostMove()
comment15.text=\n\ Movement\ for\ the\ ghosts\n
comment2.params=
comment2.target=boolean\ atIntersection()
comment2.text=\n\ Detects\ if\ Ghost\ are\ at\ an\ intersections\n
comment3.params=
comment3.target=void\ ai()
comment3.text=\n\ Artificial\ Inteligence\ for\ the\ ghost.\ If\ the\ ghost\ is\ at\ an\ intersection\ and\ it\ can\ turn\n\ and\ the\ timer\ is\ zero.\ Greenfoot\ will\ get\ a\ random\ number\ between\ zero\ and\ 3\ and\ depending\n\ on\ the\ number,\ the\ ghost\ will\ move\ a\ certain\ direction.\n
comment4.params=
comment4.target=boolean\ moveNorth()
comment4.text=\n\ Checks\ if\ Ghost\ can\ Move\ in\ each\ direction.\ It\ does\ this\ by\ getting\ the\ Wall\ class\n\ and\ seeing\ if\ is\ 11\ pixels\ away\ in\ a\ certain\ direction.\n
comment5.params=
comment5.target=boolean\ moveSouth()
comment6.params=
comment6.target=boolean\ moveEast()
comment7.params=
comment7.target=boolean\ moveWest()
comment8.params=
comment8.target=int\ quadrantToPacman()
comment8.text=\n\ This\ method\ is\ used\ to\ find\ it's\ position\ is\ relation\ to\ Pacman's.\ It\ does\ this\n\ by\ comparing\ the\ X\ &\ Y\ values\ using\ that\ information\ to\ determine\ if\ Pacman\ is\n\ to\ the\ top\ left,\ top\ right,\ bottom\ left,\ or\ bottom\ right\ of\ the\ ghost.\n\ (made\ with\ help\ from\ Cole\ Adams)\n
comment9.params=
comment9.target=void\ chase()
comment9.text=\n\ Method\ used\ to\ chase\ Pacman.\ Depending\ on\ what\ values\ the\ quadrantToPacman\ method\ returned\n\ this\ method\ will\ make\ ghost\ move\ to\ closer\ to\ Pacman.\ It\ does\ this\ by\ first\ trying\ to\ go\ to\n\ in\ one\ of\ the\ two\ directions.\ If\ it\ can't\ move\ in\ those\ directions,\ the\ ghost\ will\ move\ away\n\ from\ Pacman\ and\ try\ to\ follow\ Pacman\ again.\n
numComments=16
